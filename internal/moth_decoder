#!/usr/bin/env node

const fs = require('fs');
const WavDecoder = require('wav-decoder');
const DSP = require('dsp.js');

const frequencyToCharMap = {
  2500: 'A', 2600: 'B', 2700: 'C', 2800: 'D', 2900: 'E',
  3000: 'F', 3100: 'G', 3200: 'H', 3300: 'I', 3400: 'J',
  3500: 'K', 3600: 'L', 3700: 'M', 3800: 'N', 3900: 'O',
  4000: 'P', 4100: 'Q', 4200: 'R', 4300: 'S', 4400: 'T',
  4500: 'U', 4600: 'V', 4700: 'W', 4800: 'X', 4900: 'Y',
  5000: 'Z', 5700: 'a', 5800: 'b', 5900: 'c', 6000: 'd',
  6100: 'e', 6200: 'f', 6300: 'g', 6400: 'h', 6500: 'i',
  6600: 'j', 6700: 'k', 6800: 'l', 6900: 'm', 7000: 'n',
  7100: 'o', 7200: 'p', 7300: 'q', 7400: 'r', 7500: 's',
  7600: 't', 7700: 'u', 7800: 'v', 7900: 'w', 8000: 'x',
  8100: 'y', 8200: 'z', 800: '0', 900: '1', 1000: '2',
  1100: '3', 1200: '4', 1300: '5', 1400: '6', 1500: '7',
  1600: '8', 1700: '9', 300: '+', 700: '/', 2100: '='
};

function nextPowerOf2(x) {
  return Math.pow(2, Math.ceil(Math.log2(x)));
}

function findClosestFrequency(freq, map, tolerance = 50) {
  let closest = null;
  let minDiff = Infinity;
  for (let key of Object.keys(map)) {
    let diff = Math.abs(freq - key);
    if (diff < minDiff && diff <= tolerance) {
      minDiff = diff;
      closest = key;
    }
  }
  return closest;
}

function decodeSegment(samples, sampleRate) {
  const size = nextPowerOf2(samples.length);
  const paddedSamples = new Float32Array(size);
  paddedSamples.set(samples);

  const fft = new DSP.FFT(size, sampleRate);
  fft.forward(paddedSamples);
  const magnitudes = fft.spectrum;

  const freqStep = sampleRate / size;
  const frequencyMap = new Map();

  magnitudes.forEach((magnitude, index) => {
    if (magnitude > 0.0055) { 
      const frequency = index * freqStep;
      if (frequencyMap.has(frequency)) {
        frequencyMap.set(frequency, Math.max(frequencyMap.get(frequency), magnitude));
      } else {
        frequencyMap.set(frequency, magnitude);
      }
    }
  });

  let decodedMessage = '';
  frequencyMap.forEach((magnitude, frequency) => {
    const closestFrequency = findClosestFrequency(frequency, frequencyToCharMap);
    if (closestFrequency) {
      decodedMessage += frequencyToCharMap[closestFrequency];
    }
  });

  return decodedMessage;
}


async function analyzeWav(file) {
  try {
    const buffer = fs.readFileSync(file);
    const audioData = await WavDecoder.decode(buffer);

    if (!audioData.channelData || audioData.channelData.length === 0) {
      throw new Error('No audio data found');
    }

    const samples = audioData.channelData[0];
    const sampleRate = audioData.sampleRate;
    const segmentDuration = 0.3; // Duraci√≥n de cada segmento en segundos
    const segmentSize = Math.floor(segmentDuration * sampleRate);

    let decodedMessage = '';
    let prevFrequencies = new Map();

    for (let i = 0; i < samples.length; i += segmentSize) {
      const segment = samples.slice(i, i + segmentSize);
      const segmentMessage = decodeSegment(segment, sampleRate);

      segmentMessage.split('').forEach(char => {
        if (!prevFrequencies.has(char)) {
          decodedMessage += char;
          prevFrequencies.set(char, true);
        }
      });

      prevFrequencies.clear();
    }

    console.log(decodedMessage);
  } catch (error) {
    console.error('Error analyzing WAV file:', error);
  }
}

const audioFile = process.argv[2];
if (!audioFile) {
  console.error('Debe proporcionar la ruta al archivo de audio como argumento.');
  process.exit(1);
}

analyzeWav(audioFile);

